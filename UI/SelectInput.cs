//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Sctipts/UI/SelectInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SelectInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SelectInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SelectInput"",
    ""maps"": [
        {
            ""name"": ""Select"",
            ""id"": ""7fb622f9-5fa7-428c-bfaa-b046b8605e1e"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""2928d8ea-8f19-4f5c-b776-579d33e5e45e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f98f8bb3-fea2-4044-8fc5-775ccb73ce19"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Choice"",
            ""id"": ""fb9ef7c5-51ce-4a72-8bf7-fc9377d690b4"",
            ""actions"": [
                {
                    ""name"": ""choiceRight"",
                    ""type"": ""Button"",
                    ""id"": ""b7108dee-5756-4c1f-ad95-5d4f5499d7a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""choiceLeft"",
                    ""type"": ""Button"",
                    ""id"": ""58650cdb-e049-43ae-b595-d91e577bac56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""644571c0-7d71-4de8-b4cb-98d3ea167d97"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""choiceRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ea86777-943f-4af3-96ab-4695d2183adf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""choiceLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Select
        m_Select = asset.FindActionMap("Select", throwIfNotFound: true);
        m_Select_Select = m_Select.FindAction("Select", throwIfNotFound: true);
        // Choice
        m_Choice = asset.FindActionMap("Choice", throwIfNotFound: true);
        m_Choice_choiceRight = m_Choice.FindAction("choiceRight", throwIfNotFound: true);
        m_Choice_choiceLeft = m_Choice.FindAction("choiceLeft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Select
    private readonly InputActionMap m_Select;
    private List<ISelectActions> m_SelectActionsCallbackInterfaces = new List<ISelectActions>();
    private readonly InputAction m_Select_Select;
    public struct SelectActions
    {
        private @SelectInput m_Wrapper;
        public SelectActions(@SelectInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_Select_Select;
        public InputActionMap Get() { return m_Wrapper.m_Select; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SelectActions set) { return set.Get(); }
        public void AddCallbacks(ISelectActions instance)
        {
            if (instance == null || m_Wrapper.m_SelectActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SelectActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
        }

        private void UnregisterCallbacks(ISelectActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
        }

        public void RemoveCallbacks(ISelectActions instance)
        {
            if (m_Wrapper.m_SelectActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISelectActions instance)
        {
            foreach (var item in m_Wrapper.m_SelectActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SelectActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SelectActions @Select => new SelectActions(this);

    // Choice
    private readonly InputActionMap m_Choice;
    private List<IChoiceActions> m_ChoiceActionsCallbackInterfaces = new List<IChoiceActions>();
    private readonly InputAction m_Choice_choiceRight;
    private readonly InputAction m_Choice_choiceLeft;
    public struct ChoiceActions
    {
        private @SelectInput m_Wrapper;
        public ChoiceActions(@SelectInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @choiceRight => m_Wrapper.m_Choice_choiceRight;
        public InputAction @choiceLeft => m_Wrapper.m_Choice_choiceLeft;
        public InputActionMap Get() { return m_Wrapper.m_Choice; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChoiceActions set) { return set.Get(); }
        public void AddCallbacks(IChoiceActions instance)
        {
            if (instance == null || m_Wrapper.m_ChoiceActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ChoiceActionsCallbackInterfaces.Add(instance);
            @choiceRight.started += instance.OnChoiceRight;
            @choiceRight.performed += instance.OnChoiceRight;
            @choiceRight.canceled += instance.OnChoiceRight;
            @choiceLeft.started += instance.OnChoiceLeft;
            @choiceLeft.performed += instance.OnChoiceLeft;
            @choiceLeft.canceled += instance.OnChoiceLeft;
        }

        private void UnregisterCallbacks(IChoiceActions instance)
        {
            @choiceRight.started -= instance.OnChoiceRight;
            @choiceRight.performed -= instance.OnChoiceRight;
            @choiceRight.canceled -= instance.OnChoiceRight;
            @choiceLeft.started -= instance.OnChoiceLeft;
            @choiceLeft.performed -= instance.OnChoiceLeft;
            @choiceLeft.canceled -= instance.OnChoiceLeft;
        }

        public void RemoveCallbacks(IChoiceActions instance)
        {
            if (m_Wrapper.m_ChoiceActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IChoiceActions instance)
        {
            foreach (var item in m_Wrapper.m_ChoiceActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ChoiceActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ChoiceActions @Choice => new ChoiceActions(this);
    public interface ISelectActions
    {
        void OnSelect(InputAction.CallbackContext context);
    }
    public interface IChoiceActions
    {
        void OnChoiceRight(InputAction.CallbackContext context);
        void OnChoiceLeft(InputAction.CallbackContext context);
    }
}
