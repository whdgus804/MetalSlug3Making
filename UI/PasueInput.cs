//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Sctipts/UI/PasueInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PasueInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PasueInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PasueInput"",
    ""maps"": [
        {
            ""name"": ""Pasue"",
            ""id"": ""6b85aaaf-3248-47f5-a16a-eb5e4005a4c5"",
            ""actions"": [
                {
                    ""name"": ""pasue"",
                    ""type"": ""Button"",
                    ""id"": ""7eaafe53-643d-464f-8475-79a169d17dce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""98ada282-ef02-42c8-9477-36975a5b6bc0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pasue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Pasue
        m_Pasue = asset.FindActionMap("Pasue", throwIfNotFound: true);
        m_Pasue_pasue = m_Pasue.FindAction("pasue", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Pasue
    private readonly InputActionMap m_Pasue;
    private List<IPasueActions> m_PasueActionsCallbackInterfaces = new List<IPasueActions>();
    private readonly InputAction m_Pasue_pasue;
    public struct PasueActions
    {
        private @PasueInput m_Wrapper;
        public PasueActions(@PasueInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @pasue => m_Wrapper.m_Pasue_pasue;
        public InputActionMap Get() { return m_Wrapper.m_Pasue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PasueActions set) { return set.Get(); }
        public void AddCallbacks(IPasueActions instance)
        {
            if (instance == null || m_Wrapper.m_PasueActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PasueActionsCallbackInterfaces.Add(instance);
            @pasue.started += instance.OnPasue;
            @pasue.performed += instance.OnPasue;
            @pasue.canceled += instance.OnPasue;
        }

        private void UnregisterCallbacks(IPasueActions instance)
        {
            @pasue.started -= instance.OnPasue;
            @pasue.performed -= instance.OnPasue;
            @pasue.canceled -= instance.OnPasue;
        }

        public void RemoveCallbacks(IPasueActions instance)
        {
            if (m_Wrapper.m_PasueActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPasueActions instance)
        {
            foreach (var item in m_Wrapper.m_PasueActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PasueActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PasueActions @Pasue => new PasueActions(this);
    public interface IPasueActions
    {
        void OnPasue(InputAction.CallbackContext context);
    }
}
